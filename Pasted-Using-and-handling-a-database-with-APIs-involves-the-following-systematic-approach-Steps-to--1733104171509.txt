Using and handling a database with APIs involves the following systematic approach:


---

Steps to Use and Handle Database and APIs

1. Understanding the Database

The SQLite database (data.db) contains structured data stored in tables like Contacts, Calls, SMS, ChatMessages, and more. Each table represents a specific type of data. To work with the database:

Use SQL queries for CRUD operations:

Create: Insert new data into tables.

Read: Fetch data using SELECT queries.

Update: Modify existing data.

Delete: Remove data from the database.



Example SQL Query:

SELECT * FROM Contacts WHERE name LIKE '%John%';


---

2. Setting Up the API

The API is a Flask-based web application that exposes endpoints to interact with the database. These APIs allow external systems (like a front-end or AI agent) to query and manipulate the database.

Example Endpoints:

1. Get All Contacts:

URL: /contacts

Method: GET

Description: Fetches all contacts from the database.

Response:

[
    {"name": "John Doe", "phone": "123-456-7890"},
    {"name": "Jane Smith", "phone": "987-654-3210"}
]



2. Get SMS by Contact Name:

URL: /sms/<contact_name>

Method: GET

Description: Fetch SMS messages related to the contact.

Response:

[
    {"type": "Received", "time": "2023-12-01 10:30:00", "text": "Hello John!"},
    {"type": "Sent", "time": "2023-12-01 11:00:00", "text": "Hi there!"}
]



3. Get Chat Messages:

URL: /chat_messages?messenger=WhatsApp&sender=John

Method: GET

Description: Fetch chat messages filtered by messenger and sender.





---

3. Handling the Database

a. Connecting to the Database

Use SQLite's sqlite3 library in Python for database interactions.

Example:

import sqlite3

# Connect to the database
connection = sqlite3.connect('data.db')
cursor = connection.cursor()

# Fetch data
cursor.execute("SELECT * FROM Contacts;")
contacts = cursor.fetchall()

# Close the connection
connection.close()

# Output the data
print(contacts)

b. Running Queries Securely

Always sanitize inputs to prevent SQL injection. Use parameterized queries.

Example:

cursor.execute("SELECT * FROM Contacts WHERE name LIKE ?", ("%John%",))


---

4. Using the APIs

a. Testing APIs

Use tools like Postman or cURL to send requests to the API endpoints.

Example cURL Command:

curl -X GET http://localhost:5000/contacts


b. Front-End Interaction

From a front-end application, use JavaScript to call the APIs with fetch or Axios.


Example:

fetch('http://localhost:5000/contacts')
    .then(response => response.json())
    .then(data => console.log(data));

c. AI Agent Integration

Integrate an AI agent that interprets natural language requests and maps them to API endpoints.

Example: User says, "Show me all messages from John on WhatsApp."

The AI agent makes a request to:

GET /chat_messages?messenger=WhatsApp&sender=John




---

5. Error Handling

Always handle errors gracefully to ensure the system remains robust.

Example in Flask:

@app.errorhandler(500)
def handle_internal_error(error):
    return jsonify({"error": "An unexpected error occurred"}), 500


---

6. Deploying the API

Local Deployment:

Run the Flask app:

python app.py

Access it locally via http://localhost:5000.


Remote Deployment:

Use platforms like Replit, Heroku, or AWS to host the API and make it accessible globally.



---

Example Workflow

1. Fetch All Contacts:

API Request: GET /contacts.

Python Code:

import requests
response = requests.get('http://localhost:5000/contacts')
print(response.json())



2. Query SMS for a Contact:

API Request: GET /sms/John.

Python Code:

import requests
response = requests.get('http://localhost:5000/sms/John')
print(response.json())



3. Display in a Web Page:

Fetch data using fetch in JavaScript and render it in the front-end.





---

Would you like help with:

1. Writing specific SQL queries?


2. Extending or testing the API endpoints?


3. Deploying this system on a server or platform?



